#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WindowsFormsApp1
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="IMS")]
	public partial class kiditemDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertkiditem(kiditem instance);
    partial void Updatekiditem(kiditem instance);
    partial void Deletekiditem(kiditem instance);
    #endregion
		
		public kiditemDataContext() : 
				base(global::WindowsFormsApp1.Properties.Settings.Default.IMSConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public kiditemDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public kiditemDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public kiditemDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public kiditemDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<kiditem> kiditems
		{
			get
			{
				return this.GetTable<kiditem>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.kiditem")]
	public partial class kiditem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _itemid;
		
		private string _itemname;
		
		private string _descriptions;
		
		private System.Nullable<int> _price;
		
		private string _imagepath;
		
		private System.Nullable<int> _quantity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnitemidChanging(int value);
    partial void OnitemidChanged();
    partial void OnitemnameChanging(string value);
    partial void OnitemnameChanged();
    partial void OndescriptionsChanging(string value);
    partial void OndescriptionsChanged();
    partial void OnpriceChanging(System.Nullable<int> value);
    partial void OnpriceChanged();
    partial void OnimagepathChanging(string value);
    partial void OnimagepathChanged();
    partial void OnquantityChanging(System.Nullable<int> value);
    partial void OnquantityChanged();
    #endregion
		
		public kiditem()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_itemid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int itemid
		{
			get
			{
				return this._itemid;
			}
			set
			{
				if ((this._itemid != value))
				{
					this.OnitemidChanging(value);
					this.SendPropertyChanging();
					this._itemid = value;
					this.SendPropertyChanged("itemid");
					this.OnitemidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_itemname", DbType="VarChar(20)")]
		public string itemname
		{
			get
			{
				return this._itemname;
			}
			set
			{
				if ((this._itemname != value))
				{
					this.OnitemnameChanging(value);
					this.SendPropertyChanging();
					this._itemname = value;
					this.SendPropertyChanged("itemname");
					this.OnitemnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_descriptions", DbType="VarChar(50)")]
		public string descriptions
		{
			get
			{
				return this._descriptions;
			}
			set
			{
				if ((this._descriptions != value))
				{
					this.OndescriptionsChanging(value);
					this.SendPropertyChanging();
					this._descriptions = value;
					this.SendPropertyChanged("descriptions");
					this.OndescriptionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_price", DbType="Int")]
		public System.Nullable<int> price
		{
			get
			{
				return this._price;
			}
			set
			{
				if ((this._price != value))
				{
					this.OnpriceChanging(value);
					this.SendPropertyChanging();
					this._price = value;
					this.SendPropertyChanged("price");
					this.OnpriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_imagepath", DbType="VarChar(50)")]
		public string imagepath
		{
			get
			{
				return this._imagepath;
			}
			set
			{
				if ((this._imagepath != value))
				{
					this.OnimagepathChanging(value);
					this.SendPropertyChanging();
					this._imagepath = value;
					this.SendPropertyChanged("imagepath");
					this.OnimagepathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_quantity", DbType="Int")]
		public System.Nullable<int> quantity
		{
			get
			{
				return this._quantity;
			}
			set
			{
				if ((this._quantity != value))
				{
					this.OnquantityChanging(value);
					this.SendPropertyChanging();
					this._quantity = value;
					this.SendPropertyChanged("quantity");
					this.OnquantityChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
